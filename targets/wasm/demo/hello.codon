from C import main(Int[32], Ptr[Ptr[byte]]) -> Int[32]

from contract import Contract
from crypto import PublicKey, ECCPublicKey

from C import printhex(Ptr[byte], u32) -> None

import name
import utils

@contract(main=True)
class MyContract(Contract):

    def __init__(self, receiver: u64 = 0u64, first_receiver: u64 = 0u64, action: u64 = 0u64):
        super().__init__(receiver, first_receiver, action)

    @action('testpub')
    def test_pub(self, a26: PublicKey):
        print('+++++++++test_pub:')
        ecc_pub = ECCPublicKey.from_hex("0234ee2fc290bfad20635b8a79212b86ff13f8b866274a9fff9de79786a2eaafc6")
        _a26 = PublicKey(ecc_pub)
        print("a26 == _a26:", a26.k1.data == _a26.k1.data)
        return
        # assert a26.k1 == a26.k1
        assert a26 == _a26

    def apply(receiver: u64, code: u64, action: u64):
        print("+++++++apply")
        dec = Decoder(utils.hex2bytes("000234ee2fc290bfad20635b8a79212b86ff13f8b866274a9fff9de79786a2eaafc6"))
        pub = dec.unpack(PublicKey)

        contract = MyContract(receiver, code, action)
        contract.test_pub(pub)
        return
        if action == n'testpub'.value:
            dec = Decoder(utils.hex2bytes("000234ee2fc290bfad20635b8a79212b86ff13f8b866274a9fff9de79786a2eaafc6"))
            pub = dec.unpack(PublicKey)
            contract.test_pub(pub)
        else:
            assert False, "Unknown action"

@export
def codon_main(argc: Int[32], argv: Ptr[Ptr[byte]]) -> Int[32]:
    argv = Ptr[Ptr[byte]]()
    main(0i32, argv)

def entry():
    receiver = 0u64
    first_receiver = 0u64
    action = 0u64
    MyContract.apply(receiver, first_receiver, action)

entry()
